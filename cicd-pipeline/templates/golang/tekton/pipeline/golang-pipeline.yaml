apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: golang-pipeline
  namespace: tekton-pipelines
spec:
  params:
    - name: gitbranch
      description: Git branch of the repository
  resources:
    - name: repo
      type: git

  tasks:
  # Run unit test, Security Check and Go Build
    - name: task-one-go-validate
      params:  ## These are the params needed on the Task one
        - name: CGO_ENABLED
          value: "0"
        - name: GOOS
          value: "linux"
        - name: packages
          value: "./..."
        - name: DEST_FOLDER
          value: './cmd/main'
      resources:
        inputs:
          - name: repo
            resource: repo
      taskRef: #Name of the Task Reference
        name: task-go-validate

     # Build docker image and push to registry
    - name: task-two-build-and-push
      params: ## These are the params needed on the Task two
          - name: gitbranch
            value: $(params.gitbranch)
      taskRef:
        name: task-build-and-push
      runAfter: ## With this spec, this task will only run after the stage-one-go-build
        - task-one-go-validate
      resources:
        inputs:
          - name: repo      # name of the Task input (see Task definition)
            resource: repo  # name of the Pipeline resource

---
# Pipeline Run

#apiVersion: tekton.dev/v1beta1
#kind: PipelineRun
#metadata:
#  name: golang-build-pipeline
#spec:
# serviceAccountName: golang-service-account
# pipelineRef:
#    name: golang-pipeline
#  resources:
#  - name: repo
#    resourceRef:
#      name: golang-pipeline-resource

#--- 
# apiVersion: tekton.dev/v1alpha1
# kind: PipelineResource
# metadata:
#   name: golang-pipeline-resource
#   namespace: cicd-pipelines
# spec:
#   type: git
#   params:
#     - name: url
#       value: git@github.com:arrelpoblete04/Atlas.git #Use this if the repo is PRIVATE, use https URL if repo is PUBLIC (https://github.com/arrelpoblete04/GolangBackend)
#     - name: revision
#       value: master 